version: '3'

services:
  storage:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - "MINIO_ROOT_USER=Q3AM3UQ867SPQQA43P2F"
      - "MINIO_ROOT_PASSWORD=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
    entrypoint: sh
    command: >
      -c 'mkdir -p /export/testbucket
      && dd if=/dev/random count=10 > /export/testbucket/test.bin
      && minio server /export --console-address :9001'
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 2

  db-17:
    volumes:
      - "/var/lib/postgresql/data"
    image: postgres:17
    ports:
      - "54317:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    healthcheck:
      test: [ "CMD", "psql", "-U", "postgres" ]
      interval: 5s
      timeout: 1s
      retries: 3

  db-16:
    volumes:
      - "/var/lib/postgresql/data"
    image: postgres:16
    ports:
      - "54316:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    healthcheck:
      test: [ "CMD", "psql", "-U", "postgres" ]
      interval: 5s
      timeout: 1s
      retries: 3

  db-15:
    volumes:
      - "/var/lib/postgresql/data"
    image: postgres:15
    ports:
      - "54315:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    healthcheck:
      test: [ "CMD", "psql", "-U", "postgres" ]
      interval: 5s
      timeout: 1s
      retries: 3

  db-14:
    volumes:
      - "/var/lib/postgresql/data"
    image: postgres:14
    ports:
      - "54314:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    healthcheck:
      test: [ "CMD", "psql", "-U", "postgres" ]
      interval: 5s
      timeout: 1s
      retries: 3

  db-13:
    volumes:
      - "/var/lib/postgresql/data"
    image: postgres:13
    ports:
      - "54313:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    healthcheck:
      test: [ "CMD", "psql", "-U", "postgres" ]
      interval: 5s
      timeout: 1s
      retries: 3

  db-12:
    volumes:
      - "/var/lib/postgresql/data"
    image: postgres:12
    ports:
      - "54312:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    healthcheck:
      test: [ "CMD", "psql", "-U", "postgres" ]
      interval: 5s
      timeout: 1s
      retries: 3

  db-11:
    volumes:
      - "/var/lib/postgresql/data"
    image: postgres:11
    ports:
      - "54311:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    healthcheck:
      test: [ "CMD", "psql", "-U", "postgres" ]
      interval: 5s
      timeout: 1s
      retries: 3

  test-dbs-filler:
    image: greenmask-test-dbs-filler:latest
    environment:
      PGPASSWORD: "example"
      FILE_DUMP: "demo-small-en.zip"
      TMP_DIR: "/tmp/schema"
      PG_VERSIONS_CHECK: "11,12,13,14,15,16,17"
#    volumes:
#      - "/tmp/greenmask_tests:/tmp/schema"
    build:
      context: docker/integration/filldb
    depends_on:
      db-11:
        condition: service_healthy
      db-12:
        condition: service_healthy
      db-13:
        condition: service_healthy
      db-14:
        condition: service_healthy
      db-15:
        condition: service_healthy
      db-16:
        condition: service_healthy
      db-17:
        condition: service_healthy

  greenmask:
    image: greenmask-integration:latest
    volumes:
      - "/tmp"
    environment:
      PG_VERSIONS_CHECK: "11,12,13,14,15,16,17"

      PG_USER: postgres
      PG_PASSWORD: example
      PG_DATABASE: demo
      PG_PORT: 5432
      PG_HOST_TEMPLATE: db-<version>

      TEMP_DIR: "/tmp"
      GREENMASK_BIN_PATH: "/var/lib/greenmask/"

      STORAGE_S3_ENDPOINT: "http://storage:9000"
      STORAGE_S3_BUCKET: "testbucket"
      STORAGE_S3_REGION: "us-east-1"
      STORAGE_S3_ACCESS_KEY_ID: "Q3AM3UQ867SPQQA43P2F"
      STORAGE_S3_SECRET_KEY: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
    build:
      dockerfile: docker/integration/tests/Dockerfile
      context: ./
    depends_on:
      test-dbs-filler:
        condition: service_completed_successfully
      storage:
        condition: service_healthy
